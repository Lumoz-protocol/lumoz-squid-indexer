type Transfer @entity {
  id: ID!
  status: TransferStatus!
  deposit: Deposit @unique
  execution: Execution @unique
}

type Deposit @entity {
  id: ID!
  transfer: Transfer @derivedFrom(field: "deposit")
  type: String!
  txHash: String!
  blockNumber: String!
  depositData: String!
  timestamp: DateTime
  handlerResponse: String!
  feeID: String
  fee: Fee @unique
  accountID: String 
  account: Account 
  depositNonce: String
  resource: Resource!
  resourceID: String
  fromDomainID: String
  fromDomain: Domain!
  toDomainID: String
  toDomain: Domain!
  destination: String
  amount: String!
}

type Execution @entity {
  id: ID!
  transfer: Transfer @derivedFrom(field: "execution")
  txHash: String!
  timestamp: DateTime
  blockNumber: String!
  message: String
}

enum TransferStatus {
  pending
  executed
  failed
}

type Account @entity {
  id: ID!
  addressStatus: String
  deposits: [Deposit!] @derivedFrom(field: "account")
}

type Resource @entity {
  id: ID!
  type: String!
  deposit: [Deposit!] @derivedFrom(field: "resource")
  tokens: [Token!] @derivedFrom(field: "resource")
}

type Token @entity @index(fields: ["tokenAddress", "domainID"], unique: true) {
  id: ID!
  decimals: Int!
  tokenAddress: String!
  tokenSymbol: String!
  resource: Resource
  resourceID: String
  domain: Domain!
  domainID: String
  fee: [Fee!] @derivedFrom(field: "token")
}

type Domain @entity {
  id: ID!
  name: String!
  fromDomain: [Deposit!] @derivedFrom(field: "fromDomain")
  toDomain: [Deposit!] @derivedFrom(field: "toDomain")
  fee: [Fee!] @derivedFrom(field: "domain")
  token: [Token!] @derivedFrom(field: "domain")
}

type Fee @entity {
  id: ID! 
  amount: String!
  depositID: String
  deposit: Deposit
  domainID: String
  domain: Domain!
  token: Token
  tokenID: String
}